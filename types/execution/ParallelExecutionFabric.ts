/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../common";

export interface ParallelExecutionFabricInterface extends utils.Interface {
  functions: {
    "currentEpoch()": FunctionFragment;
    "executeParallel(bytes[],uint256)": FunctionFragment;
    "executedProposals(bytes32)": FunctionFragment;
    "shardValidators(uint256,uint256)": FunctionFragment;
    "systemPaused()": FunctionFragment;
    "userShards(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "currentEpoch"
      | "executeParallel"
      | "executedProposals"
      | "shardValidators"
      | "systemPaused"
      | "userShards"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "currentEpoch",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "executeParallel",
    values: [BytesLike[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "executedProposals",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "shardValidators",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "systemPaused",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "userShards", values: [string]): string;

  decodeFunctionResult(
    functionFragment: "currentEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeParallel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executedProposals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "shardValidators",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "systemPaused",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "userShards", data: BytesLike): Result;

  events: {
    "CrossShardSync(uint256,uint256)": EventFragment;
    "ParallelExecution(bytes32,uint256)": EventFragment;
    "ValidationComplete(bytes32,bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CrossShardSync"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ParallelExecution"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ValidationComplete"): EventFragment;
}

export interface CrossShardSyncEventObject {
  fromShard: BigNumber;
  toShard: BigNumber;
}
export type CrossShardSyncEvent = TypedEvent<
  [BigNumber, BigNumber],
  CrossShardSyncEventObject
>;

export type CrossShardSyncEventFilter = TypedEventFilter<CrossShardSyncEvent>;

export interface ParallelExecutionEventObject {
  taskId: string;
  shardId: BigNumber;
}
export type ParallelExecutionEvent = TypedEvent<
  [string, BigNumber],
  ParallelExecutionEventObject
>;

export type ParallelExecutionEventFilter =
  TypedEventFilter<ParallelExecutionEvent>;

export interface ValidationCompleteEventObject {
  proposalKey: string;
  success: boolean;
}
export type ValidationCompleteEvent = TypedEvent<
  [string, boolean],
  ValidationCompleteEventObject
>;

export type ValidationCompleteEventFilter =
  TypedEventFilter<ValidationCompleteEvent>;

export interface ParallelExecutionFabric extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ParallelExecutionFabricInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    currentEpoch(overrides?: CallOverrides): Promise<[BigNumber]>;

    executeParallel(
      transactions: BytesLike[],
      shardId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    executedProposals(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    shardValidators(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    systemPaused(overrides?: CallOverrides): Promise<[boolean]>;

    userShards(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  currentEpoch(overrides?: CallOverrides): Promise<BigNumber>;

  executeParallel(
    transactions: BytesLike[],
    shardId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  executedProposals(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  shardValidators(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  systemPaused(overrides?: CallOverrides): Promise<boolean>;

  userShards(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    currentEpoch(overrides?: CallOverrides): Promise<BigNumber>;

    executeParallel(
      transactions: BytesLike[],
      shardId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    executedProposals(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    shardValidators(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    systemPaused(overrides?: CallOverrides): Promise<boolean>;

    userShards(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "CrossShardSync(uint256,uint256)"(
      fromShard?: null,
      toShard?: null
    ): CrossShardSyncEventFilter;
    CrossShardSync(fromShard?: null, toShard?: null): CrossShardSyncEventFilter;

    "ParallelExecution(bytes32,uint256)"(
      taskId?: BytesLike | null,
      shardId?: null
    ): ParallelExecutionEventFilter;
    ParallelExecution(
      taskId?: BytesLike | null,
      shardId?: null
    ): ParallelExecutionEventFilter;

    "ValidationComplete(bytes32,bool)"(
      proposalKey?: BytesLike | null,
      success?: null
    ): ValidationCompleteEventFilter;
    ValidationComplete(
      proposalKey?: BytesLike | null,
      success?: null
    ): ValidationCompleteEventFilter;
  };

  estimateGas: {
    currentEpoch(overrides?: CallOverrides): Promise<BigNumber>;

    executeParallel(
      transactions: BytesLike[],
      shardId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    executedProposals(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    shardValidators(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    systemPaused(overrides?: CallOverrides): Promise<BigNumber>;

    userShards(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    currentEpoch(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    executeParallel(
      transactions: BytesLike[],
      shardId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    executedProposals(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    shardValidators(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    systemPaused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    userShards(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
